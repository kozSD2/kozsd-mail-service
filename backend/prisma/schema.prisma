// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String
  firstName        String
  lastName         String
  isEduDomain      Boolean   @default(false)
  isVerified       Boolean   @default(false)
  isActive         Boolean   @default(true)
  avatar           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLoginAt      DateTime?
  emailQuotaUsed   Int       @default(0)
  storageUsed      BigInt    @default(0)
  
  // Relations
  sentEmails       Email[]   @relation("SentEmails")
  receivedEmails   Email[]   @relation("ReceivedEmails")
  attachments      Attachment[]
  sessions         Session[]
  settings         UserSettings?
  
  @@map("users")
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  theme                 String  @default("auto")
  language              String  @default("en")
  timezone              String  @default("UTC")
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  autoSave              Boolean @default(true)
  signatureEnabled      Boolean @default(false)
  signature             String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

model Email {
  id           String    @id @default(cuid())
  messageId    String    @unique
  threadId     String?
  fromUserId   String?
  toUserIds    String[]
  ccUserIds    String[]  @default([])
  bccUserIds   String[]  @default([])
  fromExternal String?   // For external emails
  toExternal   String[]  @default([])
  ccExternal   String[]  @default([])
  bccExternal  String[]  @default([])
  subject      String
  bodyText     String
  bodyHtml     String?
  encryptedBody String?
  isRead       Boolean   @default(false)
  isStarred    Boolean   @default(false)
  isImportant  Boolean   @default(false)
  folder       String    @default("inbox")
  labels       String[]  @default([])
  sentAt       DateTime
  receivedAt   DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  replyToId    String?
  forwardFromId String?
  
  // Relations
  fromUser     User?        @relation("SentEmails", fields: [fromUserId], references: [id])
  attachments  Attachment[]
  replyTo      Email?       @relation("EmailReplies", fields: [replyToId], references: [id])
  replies      Email[]      @relation("EmailReplies")
  forwardFrom  Email?       @relation("EmailForwards", fields: [forwardFromId], references: [id])
  forwards     Email[]      @relation("EmailForwards")
  recipients   EmailRecipient[]
  
  @@index([fromUserId])
  @@index([threadId])
  @@index([folder])
  @@index([sentAt])
  @@index([receivedAt])
  @@index([messageId])
  @@map("emails")
}

model EmailRecipient {
  id        String   @id @default(cuid())
  emailId   String
  userId    String?
  email     String
  name      String?
  type      String   // to, cc, bcc
  isRead    Boolean  @default(false)
  readAt    DateTime?
  
  emailRef  Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  user      User?    @relation("ReceivedEmails", fields: [userId], references: [id])
  
  @@index([emailId])
  @@index([userId])
  @@map("email_recipients")
}

model Attachment {
  id           String   @id @default(cuid())
  emailId      String
  userId       String
  filename     String
  originalName String
  mimeType     String
  size         BigInt
  storageKey   String   @unique
  url          String
  thumbnailUrl String?
  isInline     Boolean  @default(false)
  contentId    String?
  uploadedAt   DateTime @default(now())
  
  // Relations
  email        Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([emailId])
  @@index([userId])
  @@map("attachments")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userAgent    String?
  ipAddress    String?
  isActive     Boolean  @default(true)
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("sessions")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  points    Int      @default(0)
  expire    DateTime
  
  @@index([key])
  @@index([expire])
  @@map("rate_limits")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  bodyText    String
  bodyHtml    String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_templates")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}