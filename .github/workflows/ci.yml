name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_kozsd_mail
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        cd ../admin && npm ci
    
    - name: Lint backend
      run: cd backend && npm run lint
    
    - name: Lint frontend
      run: cd frontend && npm run lint
    
    - name: Test backend
      run: cd backend && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_kozsd_mail
        REDIS_URL: redis://localhost:6379
        JWT_ACCESS_SECRET: test_jwt_access_secret
        JWT_REFRESH_SECRET: test_jwt_refresh_secret
        AES_ENCRYPTION_KEY: test_aes_encryption_key_32_chars
    
    - name: Test frontend
      run: cd frontend && npm test -- --coverage --watchAll=false
    
    - name: Build backend
      run: cd backend && npm run build
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Build admin
      run: cd admin && npm run build

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level moderate
        cd backend && npm audit --audit-level moderate
        cd ../frontend && npm audit --audit-level moderate
        cd ../admin && npm audit --audit-level moderate

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker buildx build --push \
          --tag ghcr.io/${{ github.repository }}/backend:latest \
          --tag ghcr.io/${{ github.repository }}/backend:${{ github.sha }} \
          ./backend
        
        docker buildx build --push \
          --tag ghcr.io/${{ github.repository }}/frontend:latest \
          --tag ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} \
          ./frontend